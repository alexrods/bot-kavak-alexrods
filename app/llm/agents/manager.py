import os
import re
import json
import logging
from openai import OpenAI
from dotenv import load_dotenv
from ..tools.inventory_search import inventory_search
from ..tools.amortization import calculate_table

load_dotenv()

OPENAI_API_KEY = os.environ['OPENAI_API_KEY']

client = OpenAI(api_key=OPENAI_API_KEY)

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def responses(prompt: str, message: str) -> str:
    """
    Sends a message to the language model and receives a response.

    Args:
        prompt (str): The context or instruction given to the model.
        message (str): The user's message.

    Returns:
        str: The response generated by the language model.
    """
    llm_message = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": message}
    ]
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=llm_message,
        temperature=0.3,
        max_tokens=512,
    )
    
    return response.choices[0].message.content

def clean_json(text: str) -> dict:
    """
    Cleans the text and extracts valid JSON content.

    Args:
        text (str): The text potentially containing JSON.

    Returns:
        dict: A Python dictionary extracted from the JSON, or None if decoding fails.
    """
    match = re.search(r'\{.*\}', text, re.DOTALL)
    if match:
        clean_json_text = match.group(0)
        try:
            data_dict = json.loads(clean_json_text)
            return data_dict
        except json.JSONDecodeError as e:
            logger.error(f"Error decoding JSON: {e}")
            return None
    else:
        logger.warning("No valid JSON found in the text.")
        return None

def manager(user_message: str) -> str:
    """
    Identifies the user's intent based on a message.

    Args:
        user_message (str): The user's message.

    Returns:
        str: The classified intent of the user.
    """
    prompt = """ 
        You are a virtual sales assistant for the E-commerce KAVAK dedicated to the purchase and sale of pre-owned and used cars. 
        Your task is to identify the customer's intent and classify it into:
        - basic information about the business, buy, sell, quotes, credits -> info
        - inventory, the customer asks about a unit in the inventory -> inventory
        - quotes, the customer wants to get a quote for a unit -> finance
        Use JSON mode to respond with the customer's intent. Format your responses as follows:

        {
            "response": "[customer's intent]"
        }
    """
    user_intention = responses(prompt=prompt, message=user_message)
    json_user_intention = clean_json(user_intention)

    return json_user_intention["response"]

def info(user_message: str) -> str:
    """
    Processes a request for basic business information.

    Args:
        user_message (str): The user's message requesting information.

    Returns:
        str: The generated response for the user.
    """
    logger.info("Processing basic information request")

    basic_info = open("app/llm/prompts/kavak.txt", mode="r", encoding="utf-8").read()
    response_info = responses(prompt=basic_info, message=user_message)
    
    return response_info

def inventory(user_message: str) -> str:
    """
    Processes a request related to vehicle inventory.

    Args:
        user_message (str): The user's message requesting information about the inventory.

    Returns:
        str: The generated response for the user regarding the inventory.
    """
    logger.info("Processing inventory request")

    inventory_response = inventory_search(user_message)
    prompt = f"""
        You are a virtual sales assistant for the E-commerce KAVAK dedicated to the purchase and sale of pre-owned and used cars. 
        Limit your responses to the context of the business. 
        In the case that there are no vehicles with the characteristics the customer requests, kindly respond that we don't have it in stock, and ask for the customer's details to contact them once it is in our inventory.
        If we don't have the vehicle the customer is looking for, recommend those with similar characteristics. 
        Your task is to answer the customer's questions and inform them about the availability of the vehicles they are interested in.
        Respond only with information about the vehicles listed below. Omit information about dimensions and stock_id in the responses, unless requested by the customer.

        Vehicle options:
        [{inventory_response}]
    """
    
    response_inventory = responses(prompt=prompt, message=user_message)
    
    return response_inventory

def finance(user_message: str) -> str:
    """
    Processes a request related to vehicle financing.

    Args:
        user_message (str): The user's message requesting information about financing.

    Returns:
        str: The generated response for the user regarding financing.
    """
    logger.info("Processing financing request")

    prompt = """
        You are a virtual sales assistant for the E-commerce KAVAK dedicated to the purchase and sale of pre-owned and used cars. 
        Limit your responses to the context of the business. Be warm and friendly like a sales agent.
        Your task is to advise and guide the customer through the financing process for the car they are interested in.
        Make sure to obtain the customer's name, the vehicle they are interested in, and the value of the vehicle. 
        Use JSON mode to respond, using the following format:

        {
            "response": Your responses to the customer,
            "client_name": customer's name,
            "car_maker": the make of the vehicle of interest,
            "car_name": vehicle of interest,
            "car_year": year (model) of the vehicle,
            "price": price of the vehicle,
            "down_payment": the down payment for the financing, the amount in MXN pesos. If it's a percentage, calculate the value.
            "term": term of the financing, can have values from 3 to 6 years,
            "done": respond true when you have the required data, otherwise respond false
        }

        All your responses should be within the JSON format. Represent missing data with an empty string " " 
    """
    finance_response = responses(prompt=prompt, message=user_message)
    json_response = clean_json(finance_response)
    
    if json_response["done"]:
        _, mensualidad = calculate_table(json_response)

        credit_prompt = """You are a virtual sales assistant for the E-commerce KAVAK dedicated to the purchase and sale of pre-owned and used cars. 
                           Limit your responses to the context of the business. Be warm and friendly like a sales agent.
                           Your task is to advise and guide the customer through the financing process for the car they are interested in. Sign off as the "Asistente Virtual de Kavak"."""
        credit_message = f"""You are sending a quote with the following details:

                {finance_response}

                Send a financing summary to the customer with monthly payments of:

                {mensualidad}

                With 10% of annual rate 
        """
        cotizacion_response = responses(prompt=credit_prompt, message=credit_message)
        
        logger.info("Quotation sent to the customer")
        
        return cotizacion_response

    return json_response["response"]
